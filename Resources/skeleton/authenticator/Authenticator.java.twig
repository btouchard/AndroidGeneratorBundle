package {{ package }}.authenticator;

import android.accounts.*;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.util.Log;
import {{ package }}.Constants;
import {{ package }}.console.Api;
import {{ package }}.console.UserColumns;
import {{ package }}.helpers.AccountHelper;
import {{ package }}.utils.StringUtils;

import java.io.IOException;

class Authenticator extends AbstractAccountAuthenticator {

	public static final String TAG 							= Constants.APP_NAME + ".Authenticator";
	
	public static final String PARAM_CONFIRM_CREDENTIALS 	= "confirmCredentials";
	public static final String PARAM_ACCOUNT_NAME 			= "accountName";
	public static final String PARAM_USERNAME	 			= "username";
	public static final String PARAM_AUTH_TOKEN_TYPE 		= "authTokenType";

	private final Context mContext;

	public Authenticator(Context context) {
		super(context);
		//Log.i(TAG, "onCreate();");
		mContext = context;
	}
	
	@Override
	public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) {
		//Log.v(TAG, "addAccount("+accountType+")");
		Intent intent = getAuthIntent(accountType);
		intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);
		final Bundle bundle = new Bundle();
		bundle.putParcelable(AccountManager.KEY_INTENT, intent);
		return bundle;
	}
	
	@Override
    @NonNull
	public Bundle getAccountRemovalAllowed(AccountAuthenticatorResponse response, Account account) throws NetworkErrorException {
		Bundle result = super.getAccountRemovalAllowed(response, account);
        if (result.containsKey(AccountManager.KEY_BOOLEAN_RESULT) && !result.containsKey(AccountManager.KEY_INTENT)) {
            final boolean removalAllowed = result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT);
            if (removalAllowed) AccountHelper.invalidateDatabase();
        }
		return result;
	}

	@Override
	public Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) {
		Log.v(TAG, "confirmCredentials()");
		throw new UnsupportedOperationException();
	}

	@Override
	public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
		Log.v(TAG, "editProperties()");
		throw new UnsupportedOperationException();
	}

	@Override
	public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle loginOptions) throws NetworkErrorException {
		Log.d(TAG, "-> getAuthToken("+authTokenType+")");

		// If the caller requested an authToken type we don't support, then
		// return an error
		if (!isValidTokenType(authTokenType)) {
			final Bundle result = new Bundle();
			result.putString(AccountManager.KEY_ERROR_MESSAGE, "invalid authTokenType");
			return result;
		}

		// Extract the username and password from the Account Manager, and ask
		// the server for an appropriate AuthToken.
		Intent intent;
		if (!StringUtils.isEmpty(AccountHelper.getPassword(account))) {
			String authToken = null;
			try {
				authToken = Api.getInstance().authenticate(account);
			} catch (AuthenticatorException | IOException ignored) {}
			
			Log.i(TAG, "--> authToken: " + authToken);
			
			if (!StringUtils.isEmpty(authToken)) {
				final Bundle result = new Bundle();
				result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);
				if (Constants.AUTH_TOKEN_TYPE.equals(authTokenType))  result.putString(AccountManager.KEY_ACCOUNT_TYPE, Constants.ACCOUNT_TYPE);
				result.putString(AccountManager.KEY_AUTHTOKEN, authToken);
				return result;
			} else {
				AccountManager am = AccountManager.get(mContext);
				intent = getAuthIntent(authTokenType);
				intent.putExtra(PARAM_ACCOUNT_NAME, account.name);
				intent.putExtra(PARAM_AUTH_TOKEN_TYPE, authTokenType);
				intent.putExtra(PARAM_CONFIRM_CREDENTIALS, true);
				intent.putExtra(PARAM_USERNAME, am.getUserData(account, UserColumns.USERNAME));
			}
		} else {
			intent = getAuthIntent(authTokenType);
			intent.putExtra(PARAM_ACCOUNT_NAME, account.name);
			intent.putExtra(PARAM_AUTH_TOKEN_TYPE, authTokenType);
			intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);
		}
		
		final Bundle bundle = new Bundle();
		bundle.putParcelable(AccountManager.KEY_INTENT, intent);
		return bundle;
	}

	@Override
	public String getAuthTokenLabel(String authTokenType) {
		// null means we don't support multiple authToken types
		Log.v(TAG, "getAuthTokenLabel()");
		throw new UnsupportedOperationException();
	}

	@Override
	public Bundle hasFeatures(AccountAuthenticatorResponse response, Account account, String[] features) {
		// This call is used to query whether the Authenticator supports
		// specific features. We don't expect to get called, so we always
		// return false (no) for any queries.
		Log.v(TAG, "hasFeatures()");
		final Bundle result = new Bundle();
		result.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, false);
		return result;
	}

	@Override
	public Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle loginOptions) {
		Log.v(TAG, "updateCredentials()");
		throw new UnsupportedOperationException();
	}
	private boolean isValidTokenType(String authTokenType) {
		return authTokenType.equals(Constants.AUTH_TOKEN_TYPE);
	}
	private Intent getAuthIntent(String type) {
		Intent intent = null;
		if (Constants.ACCOUNT_TYPE.equals(type) || Constants.AUTH_TOKEN_TYPE.equals(type))
			intent = new Intent(mContext, AccountActivity.class);
		return intent;
	}
}
