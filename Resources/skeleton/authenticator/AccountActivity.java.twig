package {{ package }}.authenticator;

import android.accounts.Account;
import android.accounts.AccountAuthenticatorActivity;
import android.accounts.AccountManager;
import android.accounts.AuthenticatorException;
import android.app.AlertDialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import {{ package }}.Constants;
import {{ package }}.R;
import {{ package }}.console.*;
import {{ package }}.helpers.AccountHelper;
import {{ package }}.providers.*;
import {{ package }}.utils.StringUtils;

import java.io.IOException;

public class AccountActivity extends AccountAuthenticatorActivity {

    public static final String TAG = Constants.APP_NAME + ".AccountActivity";

    private Boolean mConfirmCredentials;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.account_auth);

        AccountHelper.setContext(this);

        String username = getIntent().getStringExtra(Authenticator.PARAM_USERNAME);
        mConfirmCredentials = getIntent().getBooleanExtra(Authenticator.PARAM_CONFIRM_CREDENTIALS, false);

        if (!StringUtils.isEmpty(username)) {
            ((EditText) findViewById(R.id.username)).setText(username);
        }
        if (Constants.DEBUG) {
            ((EditText) findViewById(R.id.username)).setText("benjamin");
            ((EditText) findViewById(R.id.password)).setText("benpass");
        }
        findViewById(R.id.submit).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                EditText userName = (EditText) findViewById(R.id.username);
                EditText password = (EditText) findViewById(R.id.password);
                if (!StringUtils.isEmpty(userName.getText().toString()) && !StringUtils.isEmpty(password.getText().toString()))
                    new LoginTask().execute(userName.getText().toString(), password.getText().toString());
            }
        });
    }

    private void finishConfirmCredentials(Bundle user) {
        Log.i(TAG, "finishConfirmCredentials()");
        String username = user.getString(UserColumns.USERNAME);
        String pwd = user.getString(UserColumns.PASSWORD);
        user.remove(UserColumns.USERNAME);
        user.remove(UserColumns.PASSWORD);
        Log.i(TAG, "-> username: " + username + ", pwd: " + pwd);
        final Account account = AccountHelper.getAccountByTypeAndName(Constants.ACCOUNT_TYPE, username);
        if (account == null) return;
        AccountHelper.setPassword(account, pwd);
        final Intent intent = new Intent();
        intent.putExtra(AccountManager.KEY_BOOLEAN_RESULT, true);
        intent.putExtra(AccountManager.KEY_PASSWORD, user.getString(UserColumns.PASSWORD));
        setAccountAuthenticatorResult(intent.getExtras());
        setResult(RESULT_OK, intent);
        finish();
    }

    private void finishLogin(Bundle user) {
        Log.i(TAG, "finishLogin()");
        Log.i(TAG, "-> user: " + user);
        String username = user.getString(UserColumns.USERNAME);
        String pwd = user.getString(UserColumns.PASSWORD);
        user.remove(UserColumns.USERNAME);
        user.remove(UserColumns.PASSWORD);
        final Account account = new Account(username, Constants.ACCOUNT_TYPE);
        AccountHelper.addAccountExplicitly(account, pwd, user);
{% for provider in providers %}
        ContentResolver.setSyncAutomatically(account, {{ provider }}Provider.AUTHORITY, true);
{% endfor %}
        long delay = Integer.parseInt(user.getString(UserColumns.UPDATE_DELAY, "0")) * 60;
        if (delay > 0) {
            Bundle extras = new Bundle();
            extras.putLong("periodic_sync", delay);
{% for provider in providers %}
            ContentResolver.addPeriodicSync(account, {{ provider }}Provider.AUTHORITY, extras, delay);
{% endfor %}
        }
        final Intent intent = new Intent();
        intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, username);
        intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, Constants.ACCOUNT_TYPE);
        setAccountAuthenticatorResult(intent.getExtras());
        setResult(RESULT_OK, intent);
        finish();
    }

    private class LoginTask extends AsyncTask<String, Void, Bundle> {

        @Override
        protected Bundle doInBackground(String... strings) {
            String username = strings[0];
            String password = strings[1];
            Bundle user = null;
            try {
                String token = Api.getInstance().authenticate(username, password);
                if (token != null){
                    AccountHelper.removeDefaultAccount();
                    user = Api.getInstance().loadUser(token, password);
                }
            } catch (AuthenticatorException e) {
                Log.e(TAG, "AuthenticatorException: " + e.getMessage(), e);
            } catch (IOException e) {
                Log.e(TAG, "IOException: " + e.getMessage(), e);
            }
            return user;
        }

        @Override
        protected void onPostExecute(Bundle user) {
            if (user != null && !StringUtils.isEmpty(user.getString(UserColumns.TOKEN))) {
                if (mConfirmCredentials) finishConfirmCredentials(user);
                else finishLogin(user);
            } else {
                new AlertDialog.Builder(AccountActivity.this)
                        .setTitle("Account").setMessage("Auth error")
                        .setNeutralButton(R.string.close_alert, null)
                        .create().show();
            }
        }
    }

}
