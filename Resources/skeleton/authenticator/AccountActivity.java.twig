package {{ package }}.authenticator;

import android.accounts.Account;
import android.accounts.AccountAuthenticatorActivity;
import android.accounts.AccountManager;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import {{ package }}.Constants;
import {{ package }}.R;
import {{ package }}.console.*;
import {{ package }}.helpers.AccountHelper;
import {{ package }}.providers.*;
import {{ package }}.utils.StringUtils;

public class AccountActivity extends AccountAuthenticatorActivity {

    public static final String TAG = Constants.APP_NAME + ".AccountActivity";

    private AccountManager mAccountManager;
    private ProgressDialog mProgressDialog;
    private Boolean mConfirmCredentials;
    private String mUsername, mPassword;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.account_auth);

        AccountHelper.setContext(this);
        mAccountManager = AccountManager.get(this);

        mUsername = getIntent().getStringExtra(Authenticator.PARAM_USERNAME);
        mConfirmCredentials = getIntent().getBooleanExtra(Authenticator.PARAM_CONFIRM_CREDENTIALS, false);

        ((Button) findViewById(R.id.submit)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                EditText userName = (EditText) findViewById(R.id.username);
                EditText password = (EditText) findViewById(R.id.password);
                if (!StringUtils.isEmpty(userName.getText().toString()) && !StringUtils.isEmpty(password.getText().toString()))
                    new LoginTask().execute(userName.getText().toString(), password.getText().toString());
            }
        });
    }

    private void finishConfirmCredentials(Bundle user) {
        Log.i(TAG, "finishConfirmCredentials()");
        String email = user.getString(UserColumns.USERNAME);
        Log.i(TAG, "-> email: " + email);
        final Account account = AccountHelper.getAccountByTypeAndName(Constants.ACCOUNT_TYPE, email);
        if (account == null) return;
        mAccountManager.setPassword(account, user.getString(UserColumns.PASSWORD));
        final Intent intent = new Intent();
        intent.putExtra(AccountManager.KEY_BOOLEAN_RESULT, true);
        intent.putExtra(AccountManager.KEY_PASSWORD, user.getString(UserColumns.PASSWORD));
        setAccountAuthenticatorResult(intent.getExtras());
        setResult(RESULT_OK, intent);
        finish();
    }

    private void finishLogin(Bundle user) {
        Log.i(TAG, "finishLogin()");
        Log.i(TAG, "-> user: " + user);
        String username = user.getString(UserColumns.USERNAME);
        String pwd = user.getString(UserColumns.PASSWORD);
        final Account account = new Account(username, Constants.ACCOUNT_TYPE);
        if (mConfirmCredentials) {
            mAccountManager.setPassword(account, pwd);
        } else {
            mAccountManager.addAccountExplicitly(account, null, user);
            mAccountManager.setPassword(account, pwd);
{% for provider in providers %}
            ContentResolver.setSyncAutomatically(account, {{ provider }}Provider.AUTHORITY, true);
{% endif %}
            long delay = Integer.parseInt(user.getString(UserColumns.UPDATE_DELAY, "0")) * 60;
            if (delay > 0) {
                Bundle extras = new Bundle();
                extras.putLong("periodic_sync", delay);
{% for provider in providers %}
                ContentResolver.addPeriodicSync(account, {{ provider }}Provider.AUTHORITY, extras, delay);
{% endif %}
            }
        }
        final Intent intent = new Intent();
        intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, username);
        intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, Constants.ACCOUNT_TYPE);
        setAccountAuthenticatorResult(intent.getExtras());
        setResult(RESULT_OK, intent);
        finish();
    }

    private class LoginTask extends AsyncTask<String, Void, String> {

        @Override
        protected String doInBackground(String... voids) {
            return null;
        }

        @Override
        protected void onPostExecute(String token) {
            if (!StringUtils.isEmpty(token)) {
                if (mConfirmCredentials) finishConfirmCredentials(null);
                else finishLogin(null);
            } else {
                new AlertDialog.Builder(AccountActivity.this)
                        .setTitle("Account").setMessage("Auth error")
                        .setNeutralButton(R.string.close_alert, null)
                        .create().show();
            }
        }
    }

}
