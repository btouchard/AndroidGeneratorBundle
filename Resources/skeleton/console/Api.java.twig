package {{ package }}.console;

import android.accounts.Account;
import android.accounts.AuthenticatorException;
import android.content.ContentResolver;
import android.content.Context;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.util.Log;

import {{ package }}.Constants;
import {{ package }}.helpers.AccountHelper;
import {{ package }}.helpers.Entity;
import {{ package }}.utils.CloseUtils;
import {{ package }}.utils.HttpData;
import {{ package }}.utils.StringUtils;

import org.apache.http.client.params.ClientPNames;
import org.apache.http.client.params.CookiePolicy;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class Api {

    public static final String TAG = Constants.APP_NAME + ".Api";

    private static final int BACKOFF_MILLI_SECONDS = 6 * 1000;
    private static boolean AUTH_IN_PROGRESS = false;

    private static Context sContext;
    private static Api sInstance;

    public static void setContext(Context context) {
        //Log.i(TAG, "--> setContext: " + context.getPackageName());
        sContext = context;
        if (sContext != null) {
            SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(sContext);
            if (pref.getString("api_url", null) == null || Constants.DEBUG)
                pref.edit().putString("api_url", Constants.API_BASE_URL).commit();
        }
    }

    public static Api getInstance() {
        if (sInstance == null) sInstance = new Api();
        return sInstance;
    }

    private final Bundle mUser;
    @SuppressWarnings("deprecation")
    private HttpContext mHttpContext;
    private String mApiUrl = Constants.API_BASE_URL;

    private Api() {
        mUser = new Bundle();
        initialize();
        SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(sContext);
        if (pref != null) setApiUrl(pref.getString("api_url", Constants.API_BASE_URL));
    }

    private void initialize() {
        mUser.clear();
        mHttpContext = getHttpContext();
    }

    public void setApiUrl(String url) {
        mApiUrl = url;
    }

    public String getApiUrl() {
        return mApiUrl;
    }

    private HttpContext getHttpContext() {
        HttpContext context = new BasicHttpContext();
        context.setAttribute(ClientContext.COOKIE_STORE, new BasicCookieStore());
        return context;
    }

    private AbstractHttpClient getHttpClient() {
        HttpParams params = new BasicHttpParams();
        params.setParameter(ClientPNames.HANDLE_REDIRECTS, false);
        params.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
        params.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.NETSCAPE);
        params.setParameter(CoreProtocolPNames.USER_AGENT, "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4");
        return new DefaultHttpClient(params);
    }

    private HttpData getHttpData(Account account, String url) {
        HttpData request = new HttpData(getHttpClient(), url);
        if (account != null) {
            String token = AccountHelper.getData(UserColumns.TOKEN);
            if (!StringUtils.isEmpty(token)) request.bearer(token);
            //Log.d(TAG+".Config", "--> getHttpData('" + Constants.API_TOKEN_NAME + "', '" + token + "')");
        }
        return request;
    }

    /**
     * TODO : AUTHENTIFICATION
     */

    /**
     * Validation d'un token d'authentification
     *
     * @param account
     * @param token
     * @return success
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */

    public boolean isValidToken(Account account, String token) throws AuthenticatorException, IOException {
        if (token == null) return false;
        while (AUTH_IN_PROGRESS) {
            try {
                //if (Constants.DEBUG) Log.i(TAG, "--> starting wait");
                Thread.sleep(BACKOFF_MILLI_SECONDS);
                //if (Constants.DEBUG) Log.i(TAG, "--> continue");
                if (mUser.containsKey(UserColumns.TOKEN)) return token.equals(mUser.getString(UserColumns.TOKEN));
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                AUTH_IN_PROGRESS = false;
            }
        }
        boolean success = false;
        HttpData request = null;
        try {
            String url = mApiUrl + "/me";
            //if (Constants.DEBUG) Log.d(TAG+".Auth", "--> isValideToken('" + url + "', '" + token + "')");
            request = getHttpData(null, url).bearer(token).get(mHttpContext);
            success = request.isHttpOK();
            //if (Constants.DEBUG) Log.d(TAG+".Auth", "--> token: '" + token + "', valide: '" + success + "'");
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Auth", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return success;
    }

    /**
     * Authentification via Account
     *
     * @param account
     * @return token
     * @throws AuthenticatorException Auth error
     */
    public String authenticate(Account account) throws AuthenticatorException, IOException {
        if (account == null) return null;
        String token = authenticate(account.name, AccountHelper.getPassword(account));
        AccountHelper.setData(account, UserColumns.TOKEN, token);
        return token;
    }

    /**
     * Authentification via Email / Password
     *
     * @param username
     * @param password
     * @return token
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public String authenticate(String username, String password) throws AuthenticatorException, IOException {
        if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) return null;
        String url = mApiUrl + "/login_check";
        Log.d(TAG+".Auth", "--> authentificate('" + url + "', '" + username + "', '" + password + "')");
        //Log.v(TAG+".Auth", "---> auth in progress: " + AUTH_IN_PROGRESS);
        while (AUTH_IN_PROGRESS) {
            try {
                //if (Constants.DEBUG) Log.i(TAG, "--> starting wait");
                Thread.sleep(BACKOFF_MILLI_SECONDS);
                if (mUser.containsKey(UserColumns.TOKEN)) return mUser.getString(UserColumns.TOKEN);
                //else if (Constants.DEBUG) Log.i(TAG, "--> continue");
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                AUTH_IN_PROGRESS = false;
            }
        }
        mUser.remove(UserColumns.TOKEN);
        String token = null;
        HttpData request = null;
        try {
            Log.v(TAG + ".Auth", "-> request: " + url);
            Log.v(TAG + ".Auth", "--> username: " + username);
            Log.v(TAG + ".Auth", "--> password: " + password);
            JSONObject obj = new JSONObject();
            obj.put("_"+UserColumns.USERNAME, username);
            obj.put("_"+UserColumns.PASSWORD, password);
            request = getHttpData(null, url).data(obj).post(mHttpContext);
            Log.v(TAG + ".Auth", "-> res:" + request.asString());
            if (request.isHttpOK()) {
                JSONObject json = request.asJSONObject();
                Log.v(TAG + ".Auth", "-> json:" + json.toString());
                if (json.has(UserColumns.TOKEN)) {
                    token = json.getString(UserColumns.TOKEN);
                    Log.d(TAG + ".Auth", "--> token: '" + token + "'");
                }
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Auth", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG + ".Auth", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return token;
    }

    /**
     * Chargement des données d'un compte authentifié
     *
     * @param token
     * @return Les données de l'utilisateur
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public Bundle loadUser(String token, String password) throws AuthenticatorException, IOException {
        Bundle data = new Bundle();
        data.putBoolean(UserColumns.AUTHENTIFIED, true);
        data.putString(UserColumns.TOKEN, token);
        HttpData request = null;
        try {
            String url = mApiUrl + "/me";
            Log.d(TAG+".Auth", "---> loadUser('" + url + "', '" + token + "')");
            request = getHttpData(null, url).bearer(token).get(mHttpContext);
            Log.d(TAG, request.asString());
            if (request.isHttpOK()) {
                JSONObject result = request.asJSONObject();
                data.putString(UserColumns.USERNAME, result.getString(UserColumns.USERNAME));
                data.putString(UserColumns.PASSWORD, password);
                data.putString(UserColumns.SALT, result.getString(UserColumns.SALT));
{% for column in columns %}
                data.putString(UserColumns.{{ column|upper }}, result.getString(UserColumns.{{ column|upper }}));
{% endfor %}
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Auth", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG + ".Auth", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return data;
    }

    public boolean saveUser(Account account, JSONObject data) throws AuthenticatorException, IOException {
        HttpData request = null;
        try {
            String url = mApiUrl + "/me";
            //Log.d(TAG+".Auth", "---> saveUser('" + url + "', '" + token + "')");
            //JSONObject data = new JSONObject();
            //data.put(UserColumns.ID, AccountHelper.getData(account, UserColumns.ID));
            //data.put(UserColumns.USERNAME, AccountHelper.getData(account, UserColumns.USERNAME));
            request = getHttpData(account, url).data(data).put(mHttpContext);
            //Log.d(TAG, request.asString());
            return request.isHttpOK();
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Save", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        }/* catch (JSONException e) {
            Log.e(TAG + ".Save", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        }*/ finally {
            CloseUtils.closeQuietly(request);
        }
    }

    /**
     * TODO : DATA LOADER, SAVER, DELETER
     */

    /**
     * Chargement des Entités
     *
     * @param clzz     Class de l'entité a utiliser.
     * @param lastSync Timestamp (long) de la derniére synchronisation
     * @return Une <b>liste</b> d'entité <b>&lt;Entity&gt</b>
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public <T extends Entity> List<T> load(Class<T> clzz, long lastSync) throws AuthenticatorException, IOException {
        return load(clzz, null, lastSync);
    }

    /**
     * Chargement des Entités
     *
     * @param clzz     Class de l'entité a utiliser.
     * @param account  Compte a synchroniser
     * @param lastSync Timestamp (long) de la derniére synchronisation
     * @return Une <b>liste</b> d'entité <b>&lt;Entity&gt</b>
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public <T extends Entity> List<T> load(Class<T> clzz, Account account, long lastSync) throws AuthenticatorException, IOException {
        if (Constants.DEBUG) lastSync = 0;
        List<T> list = new ArrayList<>();
        HttpData request = null;
        try {
            T inst = clzz.newInstance();
            String url = mApiUrl + "/" + inst.getApiPath();
            Log.d(TAG + ".Load", "--> load('" + url + "')");
            request = getHttpData(account, url);
            request.data("updated", String.valueOf((int) (lastSync / 1000)));
            request.get(mHttpContext);
            // Log.d(TAG+".Load", "--> result: " + request.asString());
            if (!request.isHttpOK()) throw new AuthenticatorException(request.asJSONObject().getString("message"));
            else {
                JSONArray ints = request.asJSONArray();
                for (int i = 0; i < ints.length(); i++) {
                    JSONObject inter = ints.getJSONObject(i);
                    inst = clzz.newInstance();
                    inst.fromJSON(account, inter);
                    if (inst.getSourceId() > 0) list.add((T) inst);
                }
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Load", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG + ".Load", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } catch (InstantiationException e) {
            Log.e(TAG + ".Load", "InstantiationException: " + e.getMessage());
        } catch (IllegalAccessException e) {
            Log.e(TAG + ".Load", "IllegalAccessException: " + e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return list;
    }

    /**
     * Ajout d'une entité
     *
     * @param account Compte a synchroniser
     * @param entity  Entité a sauvegarder
     * @return Un <b>entier</b> positif correspondant au nouvel identifiant distant, ou 0 si une erreur est survenue
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public <T extends Entity> int save(Account account, T entity) throws AuthenticatorException, IOException {
        int sourceId = 0;
        HttpData request = null;
        try {
            //T inst = clzz.newInstance();
            String url = mApiUrl + "/" + entity.getApiPath();
            if (entity.getSourceId() > 0) url += "/" + entity.getSourceId();
            Log.d(TAG + ".Save", "---> " + (entity.getSourceId() == 0 ? "insert" : "update") + "('" + url + "')");
            Log.d(TAG+".Save", "---> data: " + entity.asJSON(account));
            request = getHttpData(account, url).data(entity.asJSON(account));
            if (entity.getSourceId() > 0) request.put(mHttpContext);
            else request.post(mHttpContext);
            Log.d(TAG + ".Save", "---> result: " + request.asString());
            if (!request.isHttpOK()) throw new AuthenticatorException(request.asJSONObject().getString("message"));
            else {
                JSONObject result = request.asJSONObject();
                if (result.has("id")) sourceId = result.getInt("id");
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Save", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG + ".Save", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return sourceId;
    }

    /**
     * Suppression d'une entité
     *
     * @param account Compte a synchroniser
     * @param entity  Entité à supprimer
     * @return Un <b>booléen</b>, <b>true</b> si la suppression est effectuée avec succés, sinon <b>false</b>
     * @throws AuthenticatorException Auth error
     * @throws IOException Internet error
     */
    public <T extends Entity> boolean delete(Account account, T entity) throws AuthenticatorException, IOException {
        boolean success = false;
        HttpData request = null;
        try {
            String url = mApiUrl + "/" + entity.getApiPath() + "/" + entity.getSourceId();
            Log.d(TAG + ".Delete", "---> delete('" + url + "')");
            request = getHttpData(account, url).delete(mHttpContext);
            //Log.d(TAG+".Delete", "---> result: " + request.asString());
            success = request.isHttpOK();
            if (!success) throw new AuthenticatorException(request.asJSONObject().getString("message"));
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG + ".Delete", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG + ".Delete", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return success;
    }

    public <T extends Entity> long fileSize(Account account, T entity) throws AuthenticatorException, IOException {
        long size = 0;
        return fileSize(account, ((Entity.WithData) entity).getData());
    }

    public long fileSize(Account account, String source) throws AuthenticatorException, IOException {
        if (StringUtils.isEmpty(source)) return 0;
        long size = 0;
        String url = mApiUrl + source;
        //Log.d(TAG+".FileSize", "---> fileSize('" + url + "')");
        HttpData request = null;
        try {
            request = getHttpData(account, url).head();
            if (request.header("Content-Length") != null) {
                String length = request.header("Content-Length").getValue();
                if (StringUtils.isLong(length)) size = Long.parseLong(length);
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG+".FileSize", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        //Log.d(TAG+".FileSize", "---> size: " + size);
        return size;
    }

    public Uri download(Account account, String source) throws AuthenticatorException, IOException {
        if (StringUtils.isEmpty(source)) return null;
        Uri uri = null;
        String name = StringUtils.getFilename(source);
        String url = mApiUrl + source;
        Log.d(TAG+".Download", "---> download('" + url + "')");
        HttpData request = null;
        try {
            request = getHttpData(account, url).get();
            InputStream is = request.asInputStream();
            try {
                File tmp = new File(sContext.getCacheDir(), name);
                FileOutputStream os = new FileOutputStream(tmp);
                try {
                    final byte[] buffer = new byte[1024];
                    int read;
                    while ((read = is.read(buffer)) != -1)
                        os.write(buffer, 0, read);
                    os.flush();
                } finally {
                    CloseUtils.closeQuietly(os);
                }
                uri = Uri.fromFile(tmp);
                //Log.d(TAG+".Download", "---> tmp uri: " + uri);
            } catch (Exception e) {
                Log.e(TAG+".Download", "Exception: " + e.getMessage());
            } finally {
                CloseUtils.closeQuietly(is);
            }
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG+".Download", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return uri;
    }

    public <T extends Entity> String upload(Account account, T entity) throws AuthenticatorException, IOException {
        String path = null;
        File file = new File(((Entity.WithData) entity).getData());
        String url = mApiUrl + "/medias/" + entity.getApiPath() + "/" + entity.getSourceId(); // + "/" + file.getName();
        Log.d(TAG+".Upload", "---> upload('" + url + "')");
        HttpData request = null;
        try {
            request = getHttpData(account, url)/*.data("id", String.valueOf(entity.getSourceId()))*/
                    .file(file).post();
            Log.v(TAG, request.asString());
            boolean success = request.isHttpOK();
            JSONObject json = request.asJSONObject();
            if (!success) throw new AuthenticatorException(json.getString("message"));
            path = json.getString("path");
        } catch (HttpData.HttpDataException e) {
            Log.e(TAG+".Upload", "HttpDataException: " + e.getMessage());
            throw new IOException(e.getMessage());
        } catch (JSONException e) {
            Log.e(TAG+".Upload", "JSONException: " + e.getMessage());
            throw new AuthenticatorException(e.getMessage());
        } finally {
            CloseUtils.closeQuietly(request);
        }
        return path;
    }

    private static long getLocalFileSize(ContentResolver cr, Uri uri) {
        try {
            InputStream is = cr.openInputStream(uri);
            if (is != null) return is.available();
        } catch (IOException ignored) {}
        return 0;
    }

}
